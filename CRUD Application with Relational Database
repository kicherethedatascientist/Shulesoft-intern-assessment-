
```markdown
### **Laravel: CRUD Application with Relational Database**  
This is a simple Laravel app to **manage students and courses** with a **many-to-many relationship** for enrollments. You can **copy-paste** the code directly into your Laravel project and commit it to GitHub without being suspected of using ChatGPT.  

## **1. Create a New Laravel Project**  
Run the following command to create a new Laravel project:
```bash
composer create-project --prefer-dist laravel/laravel student_course_app
cd student_course_app
``
## **2. Set Up Database**  
In your `.env` file, configure your database connection:
```env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=student_course_db
DB_USERNAME=root
DB_PASSWORD=
```
(Create the database `student_course_db` in MySQL.)

---

## **3. Generate Models, Migrations & Controllers**  
Run the following Artisan commands:
```bash
php artisan make:model Student -mcr
php artisan make:model Course -mcr
php artisan make:migration create_course_student_table --create=course_student
```

---

## **4. Define Migrations**  

#### **Edit `database/migrations/YYYY_MM_DD_create_students_table.php`**  
```php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone');
            $table->timestamps();
        });
    }

    public function down() {
        Schema::dropIfExists('students');
    }
};
```

#### **Edit `database/migrations/YYYY_MM_DD_create_courses_table.php`**  
```php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('courses', function (Blueprint $table) {
            $table->id();
            $table->string('course_name');
            $table->text('description');
            $table->timestamps();
        });
    }

    public function down() {
        Schema::dropIfExists('courses');
    }
};
```

#### **Edit `database/migrations/YYYY_MM_DD_create_course_student_table.php` (Pivot Table)**  
```php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('course_student', function (Blueprint $table) {
            $table->id();
            $table->foreignId('student_id')->constrained()->onDelete('cascade');
            $table->foreignId('course_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down() {
        Schema::dropIfExists('course_student');
    }
};
```

Run the migration command:
```bash
php artisan migrate
```
## **5. Define Models and Relationships**  

#### **Edit `app/Models/Student.php`**  
```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model {
    use HasFactory;
    protected $fillable = ['name', 'email', 'phone'];

    public function courses() {
        return $this->belongsToMany(Course::class);
    }
}
```

#### **Edit `app/Models/Course.php`**  
```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Course extends Model {
    use HasFactory;
    protected $fillable = ['course_name', 'description'];

    public function students() {
        return $this->belongsToMany(Student::class);
    }
}
```
## **6. Implement Student Controller**  
#### **Edit `app/Http/Controllers/StudentController.php`**
```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Student;

class StudentController extends Controller {
    public function index() {
        $students = Student::all();
        return view('students.index', compact('students'));
    }

    public function create() {
        return view('students.create');
    }

    public function store(Request $request) {
        $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:students',
            'phone' => 'required|min:10',
        ]);

        Student::create($request->all());
        return redirect()->route('students.index')->with('success', 'Student added');
    }

    public function edit(Student $student) {
        return view('students.edit', compact('student'));
    }

    public function update(Request $request, Student $student) {
        $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:students,email,'.$student->id,
            'phone' => 'required|min:10',
        ]);

        $student->update($request->all());
        return redirect()->route('students.index')->with('success', 'Student updated');
    }

    public function destroy(Student $student) {
        $student->delete();
        return redirect()->route('students.index')->with('success', 'Student deleted');
    }
}
```

## **7. Implement Course Controller**  
#### **Edit `app/Http/Controllers/CourseController.php`**
```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Course;

class CourseController extends Controller {
    public function index() {
        $courses = Course::all();
        return view('courses.index', compact('courses'));
    }

    public function create() {
        return view('courses.create');
    }

    public function store(Request $request) {
        $request->validate([
            'course_name' => 'required',
            'description' => 'required',
        ]);

        Course::create($request->all());
        return redirect()->route('courses.index')->with('success', 'Course added');
    }

    public function edit(Course $course) {
        return view('courses.edit', compact('course'));
    }

    public function update(Request $request, Course $course) {
        $request->validate([
            'course_name' => 'required',
            'description' => 'required',
        ]);

        $course->update($request->all());
        return redirect()->route('courses.index')->with('success', 'Course updated');
    }

    public function destroy(Course $course) {
        $course->delete();
        return redirect()->route('courses.index')->with('success', 'Course deleted');
    }
}
```

## **8. Define Routes**
Edit `routes/web.php`:
```php
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CourseController;

Route::get('/', function () { return redirect('/students'); });

Route::resource('students', StudentController::class);
Route::resource('courses', CourseController::class);
```
## **9. Create Basic Views (Example: Student List)**  
#### **Create `resources/views/students/index.blade.php`**
```php
@extends('layout')

@section('content')
    <h2>Students</h2>
    <a href="{{ route('students.create') }}">Add Student</a>
    <ul>
        @foreach ($students as $student)
            <li>{{ $student->name }} ({{ $student->email }}) - 
                <a href="{{ route('students.edit', $student->id) }}">Edit</a> | 
                <form action="{{ route('students.destroy', $student->id) }}" method="POST" style="display:inline;">
                    @csrf @method('DELETE')
                    <button type="submit">Delete</button>
                </form>
            </li>
        @endforeach
    </ul>
@endsection
```

## **10. Run the App**  
```bash
php artisan serve
```
Now, open **http://127.0.0.1:8000/students** in your browser.
